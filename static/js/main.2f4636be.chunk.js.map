{"version":3,"sources":["components/MatrixForm/SettingField/SettingField.module.scss","components/AvgRow/AvgRow.module.scss","components/MatrixTable/MatrixTable.module.scss","components/MatrixRow/MatrixRow.module.scss","core/functions/index.ts","redux/MatrixSlice.ts","components/MatrixForm/SettingField/index.tsx","components/MatrixForm/MatrixForm.tsx","components/MatrixTable/TableHead/TableHead.tsx","components/AvgRow/AvgRow.tsx","components/MatrixRow/MatrixRow.tsx","components/MatrixTable/TableBody/TableBody.tsx","components/MatrixTable/MatrixTable.tsx","App.tsx","reportWebVitals.js","redux/store.ts","index.tsx","components/MatrixForm/MatrixForm.module.scss"],"names":["module","exports","createMatrix","rows","columns","matrix","i","map","_row","Array","fill","_el","id","nanoid","amount","Math","floor","random","calcPercentOfSumRow","element","sum","currentAmount","MatrixSlice","createSlice","name","initialState","cells","closestIdsArr","reducers","setMatrixSettings","state","action","payload","createdMatrix","addRow","newRow","push","deleteRow","updateMatrixArr","filter","_","index","incrementCell","matrixWithIncrementCell","row","cell","toString","toLowerCase","onCellLeave","onCellHover","copiedFlattedMatrix","flat","closestIds","reduce","a","b","abs","splice","findIndex","item","SettingField","title","value","changeHandler","className","s","matrixForm__block","matrixForm__text","onChange","e","target","matrixForm__input","type","min","max","MatrixForm","useState","setColumns","setRows","setCells","actions","dispatch","useDispatch","matrixForm","matrixForm__title","columnsValue","rowsValue","cellsValue","matrixForm__button","onClick","TableHead","matrixRecords","useSelector","matrixReducer","scope","length","AvgRow","isSumHovered","setIsSumHovered","average","useMemo","sumAr","currentSum","j","round","sumAvg","acc","el","current","row__th","style","background","undefined","onMouseEnter","onMouseLeave","MatrixRow","rowName","rowIndex","sumRow","percentOfSumRow","useCallback","nearestArr","find","nearest","TableBody","MatrixTable","addRowBtn","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f4636be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrixForm__text\":\"SettingField_matrixForm__text__10d4q\",\"matrixForm__input\":\"SettingField_matrixForm__input__5OS3P\",\"matrixForm__block\":\"SettingField_matrixForm__block__2JT5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row__th\":\"AvgRow_row__th__2Q_v_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addRowBtn\":\"MatrixTable_addRowBtn__yw-P5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row__button\":\"MatrixRow_row__button__quKHv\",\"row__th\":\"MatrixRow_row__th__3n-Ry\"};","import { nanoid } from 'nanoid';\r\nimport { ICell } from '../interfaces';\r\n\r\nexport const createMatrix = (rows: number, columns: number) => {\r\n\tlet matrix: Array<Array<ICell>> = [];\r\n\tfor (let i = 0; i < rows; i++) {\r\n\t\tmatrix = [...matrix, []];\r\n\t}\r\n\tconst readyMatrix = matrix.map(_row =>\r\n\t\tnew Array(columns).fill(null).map(_el => ({\r\n\t\t\tid: nanoid(),\r\n\t\t\tamount: Math.floor(Math.random() * (999 - 100 + 1) + 100),\r\n\t\t}))\r\n\t);\r\n\treturn readyMatrix;\r\n};\r\n\r\nexport const calcPercentOfSumRow = (element: ICell | number, sum: number | null) => {\r\n\tif (!sum) return 0;\r\n\tconst currentAmount = typeof element === 'number' ? element : element.amount;\r\n\treturn Math.floor((currentAmount * 100) / sum);\r\n};\r\n","/* eslint-disable prefer-const */\r\n/* eslint-disable no-loop-func */\r\n/* eslint-disable no-debugger */\r\n/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { createMatrix } from '../core/functions';\r\nimport { ICell } from '../core/interfaces';\r\n\r\ninterface IMatrix {\r\n\tmatrix: Array<Array<ICell>>;\r\n\trows: number;\r\n\tcolumns: number;\r\n\tcells: number;\r\n\tclosestIdsArr: Array<ICell>;\r\n}\r\nexport const initialState: IMatrix = {\r\n\tmatrix: [],\r\n\trows: 0,\r\n\tcolumns: 0,\r\n\tcells: 0,\r\n\tclosestIdsArr: [],\r\n};\r\nexport const MatrixSlice = createSlice({\r\n\tname: 'matrix',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetMatrixSettings: (state, action) => {\r\n\t\t\tconst { rows, columns, cells } = action.payload;\r\n\t\t\tconst createdMatrix = createMatrix(rows, columns);\r\n\t\t\tstate.rows = rows;\r\n\t\t\tstate.columns = columns;\r\n\t\t\tstate.cells = cells;\r\n\t\t\tstate.matrix = createdMatrix;\r\n\t\t},\r\n\t\taddRow: (state, action) => {\r\n\t\t\tconst newRow = createMatrix(1, action.payload);\r\n\t\t\tstate.matrix.push(...newRow);\r\n\t\t},\r\n\t\tdeleteRow: (state, action) => {\r\n\t\t\tconst updateMatrixArr = state.matrix.filter((_, index) => index !== action.payload);\r\n\t\t\tstate.matrix = updateMatrixArr;\r\n\t\t},\r\n\t\tincrementCell: (state, action) => {\r\n\t\t\tconst matrixWithIncrementCell = state.matrix.map(row =>\r\n\t\t\t\trow.map(cell =>\r\n\t\t\t\t\tcell.id.toString().toLowerCase() === action.payload.toString().toLowerCase()\r\n\t\t\t\t\t\t? { ...cell, amount: cell.amount + 1 }\r\n\t\t\t\t\t\t: cell\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tstate.matrix = matrixWithIncrementCell;\r\n\t\t},\r\n\t\tonCellLeave: (state, action) => {\r\n\t\t\tstate.closestIdsArr = [];\r\n\t\t},\r\n\t\tonCellHover: (state, action) => {\r\n\t\t\tlet flattedMatrix = state.matrix.flat();\r\n\t\t\tlet copiedFlattedMatrix = flattedMatrix;\r\n\t\t\tlet closestIds: ICell[] = [];\r\n\t\t\tfor (let i = 0; i < state.cells; i++) {\r\n\t\t\t\tclosestIds = [\r\n\t\t\t\t\t...closestIds,\r\n\t\t\t\t\tcopiedFlattedMatrix.reduce((a: ICell, b: ICell) => {\r\n\t\t\t\t\t\treturn Math.abs(b.amount - action.payload.amount) < Math.abs(a.amount - action.payload.amount) ? b : a;\r\n\t\t\t\t\t}, copiedFlattedMatrix[0]),\r\n\t\t\t\t];\r\n\t\t\t\tcopiedFlattedMatrix.splice(\r\n\t\t\t\t\tcopiedFlattedMatrix.findIndex(item => {\r\n\t\t\t\t\t\treturn item.id === closestIds[i].id;\r\n\t\t\t\t\t}),\r\n\t\t\t\t\t1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tstate.closestIdsArr = closestIds;\r\n\t\t},\r\n\t},\r\n});\r\n","import { FC } from 'react';\r\nimport s from './SettingField.module.scss';\r\n\r\ntype SettingFieldProps = {\r\n\ttitle: string;\r\n\tvalue: number;\r\n\tchangeHandler: (value: number) => void;\r\n};\r\n\r\nconst SettingField: FC<SettingFieldProps> = ({ title, value, changeHandler }) => {\r\n\treturn (\r\n\t\t<div className={s.matrixForm__block}>\r\n\t\t\t<span className={s.matrixForm__text}>{title}</span>\r\n\t\t\t<input\r\n\t\t\t\tvalue={value || ''}\r\n\t\t\t\tonChange={e => changeHandler(+e.target.value)}\r\n\t\t\t\tclassName={s.matrixForm__input}\r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tmin=\"1\"\r\n\t\t\t\tmax=\"99\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SettingField;\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\nimport { FC, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport s from './MatrixForm.module.scss';\r\n\r\nimport { MatrixSlice } from '../../redux/MatrixSlice';\r\nimport SettingField from './SettingField';\r\n\r\nconst MatrixForm: FC = () => {\r\n\tconst [columns, setColumns] = useState<number>(0);\r\n\tconst [rows, setRows] = useState<number>(0);\r\n\tconst [cells, setCells] = useState<number>(0);\r\n\r\n\tconst { setMatrixSettings } = MatrixSlice.actions;\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst submitSettings = () => {\r\n\t\tif (columns && rows) {\r\n\t\t\tdispatch(setMatrixSettings({ rows, columns, cells }));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={s.matrixForm}>\r\n\t\t\t\t<h2 className={s.matrixForm__title}>Matrix builder</h2>\r\n\t\t\t\t<SettingField\r\n\t\t\t\t\ttitle=\"Enter the number of columns\"\r\n\t\t\t\t\tvalue={columns}\r\n\t\t\t\t\tchangeHandler={(columnsValue: number) => setColumns(columnsValue)}\r\n\t\t\t\t/>\r\n\t\t\t\t<SettingField\r\n\t\t\t\t\ttitle=\"Enter the number of rows\"\r\n\t\t\t\t\tvalue={rows}\r\n\t\t\t\t\tchangeHandler={(rowsValue: number) => setRows(rowsValue)}\r\n\t\t\t\t/>\r\n\t\t\t\t<SettingField\r\n\t\t\t\t\ttitle=\"Enter the number of cells\"\r\n\t\t\t\t\tvalue={cells}\r\n\t\t\t\t\tchangeHandler={(cellsValue: number) => setCells(cellsValue)}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<button className={s.matrixForm__button} onClick={submitSettings} type=\"button\">\r\n\t\t\t\t\tCreate matrix\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* <div>\r\n\t\t\t\t{!!matrixRecords.length && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<button type=\"button\" onClick={() => dispatch(addRow(columns))} className={s.addRowBtn}>\r\n\t\t\t\t\t\t\tAdd row\r\n\t\t\t\t\t\t</button>\r\n\r\n\t\t\t\t\t\t<table className=\"table myTable\">\r\n\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">№</th>\r\n\t\t\t\t\t\t\t\t\t{new Array(matrixRecords[0].length).fill(null).map((_, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">{index + 1}</th>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Sum</th>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t{matrixRecords.map((row, index) => (\r\n\t\t\t\t\t\t\t\t\t<MatrixRow key={row[0].id} row={row} rowName={index + 1} rowIndex={index} />\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t<AvgRow />\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</div> */}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default MatrixForm;\r\n","import { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreType } from '../../../redux/store';\r\n\r\nconst TableHead: FC = () => {\r\n\tconst matrixRecords = useSelector((state: StoreType) => state.matrixReducer.matrix);\r\n\treturn (\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th scope=\"col\">№</th>\r\n\t\t\t\t{new Array(matrixRecords[0].length).fill(null).map((_, index) => (\r\n\t\t\t\t\t<th scope=\"col\">{index + 1}</th>\r\n\t\t\t\t))}\r\n\t\t\t\t<th scope=\"col\">Sum</th>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t);\r\n};\r\n\r\nexport default TableHead;\r\n","import { FC, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { calcPercentOfSumRow } from '../../core/functions';\r\nimport { StoreType } from '../../redux/store';\r\nimport s from './AvgRow.module.scss';\r\n\r\nconst AvgRow: FC = () => {\r\n\tconst [isSumHovered, setIsSumHovered] = useState(false);\r\n\tconst matrixRecords = useSelector((state: StoreType) => state.matrixReducer.matrix);\r\n\r\n\tconst average = useMemo(() => {\r\n\t\tif (!matrixRecords.length) return null;\r\n\t\tlet sumAr: Array<number> = [];\r\n\r\n\t\tfor (let i = 0; i < matrixRecords[0].length; i++) {\r\n\t\t\tlet currentSum = 0;\r\n\t\t\tfor (let j = 0; j < matrixRecords.length; j++) {\r\n\t\t\t\tcurrentSum += matrixRecords[j][i].amount;\r\n\t\t\t}\r\n\t\t\tsumAr = [...sumAr, Math.round(currentSum / matrixRecords.length)];\r\n\t\t}\r\n\t\treturn sumAr;\r\n\t}, [matrixRecords]);\r\n\r\n\tconst sumAvg = useMemo(\r\n\t\t() =>\r\n\t\t\t!average\r\n\t\t\t\t? null\r\n\t\t\t\t: average.reduce((acc, el) => {\r\n\t\t\t\t\t\treturn acc + el;\r\n\t\t\t\t  }, 0),\r\n\t\t[average]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Avg</th>\r\n\r\n\t\t\t{average?.map(current => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<th\r\n\t\t\t\t\t\tclassName={s.row__th}\r\n\t\t\t\t\t\tstyle={\r\n\t\t\t\t\t\t\tisSumHovered\r\n\t\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\t\tbackground: `linear-gradient(to top, red 0%, #fff ${calcPercentOfSumRow(current, sumAvg)}%)`,\r\n\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tscope=\"row\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{isSumHovered ? `${calcPercentOfSumRow(current, sumAvg)}%` : current}\r\n\t\t\t\t\t</th>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t\t<th\r\n\t\t\t\tclassName={s.row__th}\r\n\t\t\t\tscope=\"row\"\r\n\t\t\t\tonMouseEnter={() => setIsSumHovered(true)}\r\n\t\t\t\tonMouseLeave={() => setIsSumHovered(false)}\r\n\t\t\t>\r\n\t\t\t\t{sumAvg}\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t);\r\n};\r\n\r\nexport default AvgRow;\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n\r\nimport { FC, useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { calcPercentOfSumRow } from '../../core/functions';\r\nimport { ICell } from '../../core/interfaces';\r\nimport { MatrixSlice } from '../../redux/MatrixSlice';\r\nimport { StoreType } from '../../redux/store';\r\nimport s from './MatrixRow.module.scss';\r\n\r\ntype MatrixRowProps = {\r\n\trow: Array<ICell>;\r\n\trowName: number | string;\r\n\trowIndex: number;\r\n};\r\n\r\nconst MatrixRow: FC<MatrixRowProps> = ({ row, rowName, rowIndex }) => {\r\n\tconst [isSumHovered, setIsSumHovered] = useState(false);\r\n\r\n\tconst { deleteRow, incrementCell, onCellHover, onCellLeave } = MatrixSlice.actions;\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst sumRow = row.reduce((acc, el) => acc + el.amount, 0);\r\n\tconst percentOfSumRow = useCallback((element: ICell) => calcPercentOfSumRow(element, sumRow), [sumRow]);\r\n\r\n\tconst nearestArr = useSelector((state: StoreType) => state.matrixReducer.closestIdsArr);\r\n\r\n\treturn (\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">{rowName}</th>\r\n\t\t\t{row.map(element => (\r\n\t\t\t\t<td\r\n\t\t\t\t\tkey={element.id}\r\n\t\t\t\t\tonClick={() => dispatch(incrementCell(element.id))}\r\n\t\t\t\t\tonMouseEnter={() => dispatch(onCellHover(element))}\r\n\t\t\t\t\tonMouseLeave={() => dispatch(onCellLeave(true))}\r\n\t\t\t\t\tstyle={\r\n\t\t\t\t\t\tisSumHovered\r\n\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\tbackground: `linear-gradient(to top, red 0%, #fff ${percentOfSumRow(element)}%)`,\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t: nearestArr.find(nearest => nearest.id === element.id)\r\n\t\t\t\t\t\t\t? { background: '#FFFF00' }\r\n\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t{isSumHovered ? `${percentOfSumRow(element)}%` : element.amount}\r\n\t\t\t\t</td>\r\n\t\t\t))}\r\n\t\t\t<th\r\n\t\t\t\tclassName={s.row__th}\r\n\t\t\t\tscope=\"row\"\r\n\t\t\t\tonMouseEnter={() => setIsSumHovered(true)}\r\n\t\t\t\tonMouseLeave={() => setIsSumHovered(false)}\r\n\t\t\t>\r\n\t\t\t\t{sumRow}\r\n\t\t\t</th>\r\n\t\t\t<i onClick={() => dispatch(deleteRow(rowIndex))} className=\"material-icons\">\r\n\t\t\t\tdelete_forever\r\n\t\t\t</i>\r\n\t\t</tr>\r\n\t);\r\n};\r\n\r\nexport default MatrixRow;\r\n","import { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreType } from '../../../redux/store';\r\n\r\nimport AvgRow from '../../AvgRow/AvgRow';\r\nimport MatrixRow from '../../MatrixRow/MatrixRow';\r\n\r\nconst TableBody: FC = () => {\r\n\tconst matrixRecords = useSelector((state: StoreType) => state.matrixReducer.matrix);\r\n\treturn (\r\n\t\t<tbody>\r\n\t\t\t{matrixRecords.map((row, index) => (\r\n\t\t\t\t<MatrixRow key={row[0].id} row={row} rowName={index + 1} rowIndex={index} />\r\n\t\t\t))}\r\n\t\t\t<AvgRow />\r\n\t\t</tbody>\r\n\t);\r\n};\r\n\r\nexport default TableBody;\r\n","import { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { MatrixSlice } from '../../redux/MatrixSlice';\r\nimport { StoreType } from '../../redux/store';\r\n\r\nimport TableHead from './TableHead/TableHead';\r\nimport s from './MatrixTable.module.scss';\r\nimport TableBody from './TableBody/TableBody';\r\n\r\nconst MatrixTable: FC = () => {\r\n\tconst matrixRecords = useSelector((state: StoreType) => state.matrixReducer.matrix);\r\n\tconst columns = useSelector((state: StoreType) => state.matrixReducer.columns);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst { addRow } = MatrixSlice.actions;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{!matrixRecords.length ? (\r\n\t\t\t\t<span>At first, set settings for matrix</span>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<button type=\"button\" onClick={() => dispatch(addRow(columns))} className={s.addRowBtn}>\r\n\t\t\t\t\t\tAdd row\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t\t<table className=\"table myTable\">\r\n\t\t\t\t\t\t<TableHead />\r\n\t\t\t\t\t\t<TableBody />\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MatrixTable;\r\n","import { FC } from 'react';\r\nimport './App.css';\r\nimport MatrixForm from './components/MatrixForm/MatrixForm';\r\nimport MatrixTable from './components/MatrixTable/MatrixTable';\r\n\r\nconst App: FC = () => {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<MatrixForm />\r\n\t\t\t<MatrixTable />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { MatrixSlice } from './MatrixSlice';\r\n\r\nconst store = configureStore({\r\n\treducer: {\r\n\t\tmatrixReducer: MatrixSlice.reducer,\r\n\t},\r\n});\r\n\r\nexport type StoreType = ReturnType<typeof store.getState>;\r\n\r\nexport default store;\r\n","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n\t<StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrixForm\":\"MatrixForm_matrixForm__3wSnc\",\"matrixForm__title\":\"MatrixForm_matrixForm__title__2ot83\",\"matrixForm__button\":\"MatrixForm_matrixForm__button__1uEz2\",\"matrixForm__btn\":\"MatrixForm_matrixForm__btn__3BUMy\",\"addRowBtn\":\"MatrixForm_addRowBtn__3JZ3d\"};"],"sourceRoot":""}